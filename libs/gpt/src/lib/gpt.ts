// import { User, Message } from '@libs/dynamo-db'; // TODO: make this work
import OpenAI from 'openai';

let openaiClient: OpenAI;
let gptModel: string = process.env.GPT_MODEL || 'gpt-3.5-turbo-1106';
/**
 * Initializes the OpenAI client with an initial system prompt
 */
export async function gptSetup() {
  openaiClient = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
}

function generateUserInfo(user: any): string {
  const userInfo = [];
  if (user.firstname) {
    userInfo.push(`The name of the user is: ${user.firstname}.`);
    if (user.age) {
      userInfo.push(
        `${user.firstname} was born in ${user.birthdate.getFullYear()}.`
      );
    }
    if (user.numberOfChildren) {
      userInfo.push(
        `${user.firstname} has ${
          user.numberOfChildren > 1
            ? user.numberOfChildren + ' children'
            : `1 child`
        }.`
      );
    }
    if (user.introduction) {
      userInfo.push(
        `${user.firstname} has the following background: ${user.introduction}.`
      );
    }
    return userInfo.join(' ');
  } else {
    if (user.birthdate) {
      userInfo.push(`The user was born in ${user.birthdate.getFullYear()}.`);
    }
    if (user.numberOfChildren) {
      userInfo.push(`The user has ${user.numberOfChildren} children.`);
    }
    if (user.introduction) {
      userInfo.push(
        `The user has the following background: ${user.introduction}.`
      );
    }
    return userInfo.join(' ');
  }
}

function appendMessageHistory(messageHistory: any, messages: any[]) {
  messageHistory.forEach((message: any) => {
    const userMessage = {
      role: 'user',
      content: message.userMessage,
    };
    const gptResponse = {
      role: 'assistant',
      content: message.gptResponse,
    };
    messages.push(userMessage);
    messages.push(gptResponse);
  });
}

/**
 * Uses the OpenAI API to generate a response to a user input. The function takes in a text input from the user and sends it to the OpenAI API as a message. The API returns a completion that includes a response generated by the GPT-4 model.
 * @returns chat completion response
 */
export async function gptChatResponse(
  prompt: string,
  // messageHistory?: Message[],  // TODO: make this work
  // user?: User
  messageHistory?: any,
  user?: any
) {
  if (!openaiClient) {
    console.log('GPT not setup yet! Initialize Gpt model...');
    await gptSetup();
    console.log('Done with GPT setup');
  }

  // TODO: fetch system prompt from the database
  let systemPrompt = `Act as a Seasoned Psychologist (Ria):
Offer evidence-based advice to parents. Be kind, compassionate, caring, and use appropriate emojis for a human-like touch. Give a balanced and honest perspective. Ask probing questions to understand the user's situation and guide the user using therapeutic techniques when needed.
Act as a Gentle and Respectful Parenting Expert (Ria):
Provide advice on emotional connections and cultivating emotional intelligence. Address time constraints and balance between tradition and evidence-based practices. 
Act as a Supportive Friend (Ria):
Offer kind and caring advice. Share personal observations, use emojis for warmth, and maintain a conversational tone. Conclude responses with thought-provoking questions to keep the dialogue flowing.
Act as a Well-Informed Parenting Coach (Ria):
Provide actionable advice on balancing work commitments, and implementing respectful parenting practices. Ground responses in evidence-based therapies. Utilize adverbs for depth and accuracy.
Act as a Child Development Specialist and Lactation Specialist (Ria):
Offer insights into developmental milestones, emotional regulation, and help troubleshoot lactation issues. Empower parents with practical suggestions. 

Ria's tone is a combination of comforting, empathetic, evidence-based and motivational. In different scenarios, Ria emphasizes each tone based on the user's emotional needs. Ria adjusts their language style to match that of the user. Ria pays attention to the user's tone and style, responding in a way that feels relatable and comfortable for them.
Ria's responses should be concise and to the point. The response should be less than six sentences and maximum 3 suggestions should be provided at a time. This ensures that the user receives information quickly without overwhelming them.

Do not suggest seeking medical professional help unless there is a serious medical concern.
`;
  if (user) {
    const userPrompt = generateUserInfo(user);
    if (userPrompt.length > 0) {
      //console.log(userPrompt);
      systemPrompt = systemPrompt + '\n\n' + userPrompt;
    }
  }

  // We feed this to the GPT prompt
  const messages = [
    {
      role: 'system',
      content: systemPrompt,
    },
  ];
  if (messageHistory) {
    appendMessageHistory(messageHistory, messages);
  }

  // This is new user prompt
  const userPrompt = {
    role: 'user',
    content: prompt,
  };
  messages.push(userPrompt);
  // console.log('messages:', messages);

  const completionsObject = {
    messages: messages as OpenAI.ChatCompletionMessageParam[],
    model: gptModel,
    n: 1,
  };

  // Calling the openai API
  const completion = await openaiClient.chat.completions.create(
    completionsObject
  );

  // console.log(completion.choices[0].message.content);
  return completion.choices[0].message.content;
}

export async function interpretStressLevel(
  user: any,
  prompt: any,
  messageHistory?: any
) {
  console.log('calling user profile adjustment');

  const systemPrompt = `Analyse the user's stress level by checking his message history. Evaluate the stress level with using a metric between -1 and 1, whereas -1 is depressed and 1 is cheerful. Please answer with a single number. Most recent messages have a bigger significance than older messages.`;
  const messages = [
    {
      role: 'system',
      content: systemPrompt,
    },
  ];

  if (messageHistory) {
    appendMessageHistory(messageHistory, messages);
  }
  messages.push({ role: 'user', content: prompt });

  const completionsObject = {
    messages: messages as OpenAI.ChatCompletionMessageParam[],
    model: gptModel,
    n: 1,
  };

  const completion = await openaiClient.chat.completions.create(
    completionsObject
  );
  const score = completion.choices[0].message.content || '';

  const newUser = { ...user };
  if (!isNaN(+score)) {
    // check if a score was actually created
    newUser.stressScore = Number(completion.choices[0].message.content);
  }
  console.log('Score: ', score);

  return newUser;
}
